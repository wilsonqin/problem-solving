DIGITS = 5

strn = ("731671765313306249192251196744265747423553491949349698352031277450632623" +
      "957831801698480186947885184385861560789112949495459501737958331952853208" +
      "805511125406987471585238630507156932909632952274430435576689664895044524" +
      "452316173185640309871112172238311362229893423380308135336276614282806444" +
      "486645238749303589072962904915604407723907138105158593079608667017242712" +
      "188399879790879227492190169972088809377665727333001053367881220235421809" +
      "751254540594752243525849077116705560136048395864467063244157221553975369" +
      "781797784617406495514929086256932197846862248283972241375657056057490261" +
      "407972968652414535100474821663704844031998900088952434506585412275886668" +
      "811642717147992444292823086346567481391912316282458617866458359124566529" +
      "4765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
      )

def to_arr(strng):
  lst = []
  for char in strng:
    lst.append(int(char))
  return lst

def checkFind(arr):
  lim_min = 0
  lim_max = DIGITS
  max_prod = 0
  MAX = pow(9,5)
  
  while lim_max < len(arr):
    prod = reduce(lambda a, prod: a*prod, arr[lim_min:lim_max], 1)
    #sanity check that our products are reasonable, in range
    assert(prod <= MAX)
    
    if prod > max_prod:
      max_prod = prod
    lim_min += 1
    lim_max += 1
  return max_prod

print checkFind(to_arr(strn))
